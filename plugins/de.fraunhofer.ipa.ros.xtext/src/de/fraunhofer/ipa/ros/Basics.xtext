grammar de.fraunhofer.ipa.ros.Basics with org.eclipse.xtext.common.Terminals

import "platform:/resource/de.fraunhofer.ipa.ros/model/ros.ecore"
import "platform:/resource/de.fraunhofer.ipa.ros/model/PrimitivesTypes.ecore" as primitives
//import "http://www.ipa.fraunhofer.de/ros"
//import "http://www.ipa.fraunhofer.de/primitives" as primitives
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://www.eclipse.org/emf/2003/XMLType" as type

///////////////////
//NAMESPACES
///////////////////
Namespace returns Namespace:
    GlobalNamespace | RelativeNamespace_Impl | PrivateNamespace;

GraphName returns GraphName:
    'GraphName' ;

GlobalNamespace returns GlobalNamespace:
    {GlobalNamespace}
    'GlobalNamespace'
        ('[' parts+=GraphName ( "," parts+=GraphName)* ']' )?;

RelativeNamespace_Impl returns RelativeNamespace:
    {RelativeNamespace}
    'RelativeNamespace'
        ('[' parts+=GraphName ( "," parts+=GraphName)* ']' )?;

PrivateNamespace returns PrivateNamespace:
    {PrivateNamespace}
    'PrivateNamespace'
        ('[' parts+=GraphName ( "," parts+=GraphName)* ']' )?;

///////////////////
//PARAMETERS DEFINITION
///////////////////
RosParamNames returns ecore::EString:
    ROS_CONVENTION_PARAM | ID
;

Parameter returns Parameter:
    {Parameter}
        name=EString':'
        BEGIN
        ('ns:' namespace=Namespace)?
        'type:' type=ParameterType
        ('value:' value=ParameterValue)?
        END
    ;

ParameterType returns ParameterType:
    ParameterListType | ParameterStructType | ParameterIntegerType | ParameterStringType | ParameterDoubleType | ParameterBooleanType | ParameterBase64Type | ParameterArrayType; // | ParameterDateType;

ParameterValue returns ParameterValue:
    ParameterString | ParameterBase64 | ParameterInteger | ParameterDouble | ParameterBoolean | ParameterList | ParameterStruct; // | ParameterDate;


ParameterListType returns ParameterListType:
    {ParameterListType}
    'List'
    '['
        sequence+=ParameterType ( ',' sequence+=ParameterType )*
    ']';

ParameterStructType returns ParameterStructType:
    {ParameterStructType}
    'Struct'
    '['
        parameterstructypetmember+=ParameterStructTypeMember ( "," parameterstructypetmember+=ParameterStructTypeMember)*
    ']';

ParameterIntegerType returns ParameterIntegerType:
    {ParameterIntegerType}
    'Integer'
    ('default:' default=ParameterInteger)?;

ParameterStringType returns ParameterStringType:
    {ParameterStringType}
    'String'
    ('default:' default=ParameterString)?;

ParameterDoubleType returns ParameterDoubleType:
    {ParameterDoubleType}
    'Double'
    ('default:' default=ParameterDouble)?;

ParameterDateType returns ParameterDateType:
    {ParameterDateType}
    'Date'
    ('default:' default=ParameterDate)?;

ParameterBooleanType returns ParameterBooleanType:
    {ParameterBooleanType}
    'Boolean'
    ('default:' default=ParameterBoolean)?;

ParameterBase64Type returns ParameterBase64Type:
    {ParameterBase64Type}
    'Base64'
    ('default:' default=ParameterBase64)?;

ParameterAnyType returns ParameterAnyType:
    {ParameterAnyType}
    'Any'
    ('default:' default=ParameterAny)?;

ParameterArrayType returns ParameterArrayType:
    'Array' type=ParameterType
    ('default:' default=ParameterList)?
;

ParameterList returns ParameterSequence:
    {ParameterSequence}
        '[' value+=ParameterValue ( ',' value+=ParameterValue )* ']'
;

ParameterAny returns ParameterAny:
    {ParameterAny}
    'ParameterAny'
        ('value' value=EString)?
    ;

ParameterString returns ParameterString:
    value=EString
;

ParameterBase64 returns ParameterBase64:
    value=Base64Binary
;

ParameterInteger returns ParameterInteger:
    value=Integer0
;

ParameterDouble returns ParameterDouble:
    value=Double0
;

ParameterBoolean returns ParameterBoolean:
    value=boolean0
;

ParameterStruct returns ParameterStruct:
    {ParameterStruct}
        ('[' 
        BEGIN
        (value+=ParameterStructMember)* ']'
        END
        )?
;

ParameterDate returns ParameterDate:
    value=DateTime0
    ;


ParameterStructMember returns ParameterStructMember:
    name=EString':'value=ParameterValue;


ParameterStructTypeMember returns ParameterStructTypeMember:
        name=EString
        type=ParameterType
    ;

///////////////////
//PARAMETERS PRIMITIVES TYPES
///////////////////
terminal DIGIT: '0'..'9';

terminal BINARY: ('0b'|'0B')('0'|'1')+;

terminal BOOLEAN: 'true'|'false';
terminal DOUBLE returns ecore::EDouble: (DIGIT* | ('-' DIGIT*) ) (('.' DECINT*) | (('.' DIGIT*)? ('E'|'e') ('-'|'+')? DIGIT*));  // Use terminal to avoid 'e' turning into a keyword
terminal DECINT: '0' | ('1'..'9' DIGIT*) | ('-''0'..'9' DIGIT*) ;
terminal DAY:'1'..'9' | '1'..'3' '0'..'9';
terminal MONTH:'1'..'9' | '1' '0'..'2';
terminal YEAR:'0'..'2' '0'..'9' '0'..'9' '0'..'9';
terminal HOUR: ('0'..'1')('0'..'9') | ('2')('0'..'3');
terminal MIN_SEC:('0'..'5')('0'..'9');
terminal DATE_TIME: YEAR'-'MONTH'-'DAY'T'HOUR':'MIN_SEC':'MIN_SEC;

Base64Binary returns type::Base64Binary:
    BINARY ;

boolean0 returns type::Boolean:
    BOOLEAN;

Double0 returns type::Double:
    DOUBLE;

Integer0 returns type::Int:
    DECINT;

DateTime0 returns type::DateTime:
    DATE_TIME;

///////////////////
//MESSAGE PRIMITIVES DEFINITION
///////////////////
MessagePart returns primitives::MessagePart:
    Type = AbstractType
    Data =(KEYWORD | MESSAGE_ASIGMENT | EString)
;

terminal MESSAGE_ASIGMENT:
    ((ID|STRING)'='(ID|STRING|INT|'-'INT))
;

AbstractType returns primitives::AbstractType:
    bool | int8 | uint8 | int16 | uint16 | int32 | uint32 | int64 | uint64 | float32 | float64 | string0 | byte | time | duration | Header |
    boolArray | int8Array | uint8Array | int16Array | uint16Array | int32Array | uint32Array | int64Array | uint64Array | float32Array | float64Array | string0Array | byteArray |
    SpecBaseRef | ArraySpecRef | char | charArray;


bool returns primitives::bool:
    {primitives::bool}
    'bool'
    ;

int8 returns primitives::int8:
    {primitives::int8}
    'int8'
    ;

uint8 returns primitives::uint8:
    {primitives::uint8}
    'uint8'
    ;

int16 returns primitives::int16:
    {primitives::int16}
    'int16'
    ;

uint16 returns primitives::uint16:
    {primitives::uint16}
    'uint16'
    ;

int32 returns primitives::int32:
    {primitives::int32}
    'int32'
    ;

uint32 returns primitives::uint32:
    {primitives::uint32}
    'uint32'
    ;

int64 returns primitives::int64:
    {primitives::int64}
    'int64'
    ;

uint64 returns primitives::uint64:
    {primitives::uint64}
    'uint64'
    ;

float32 returns primitives::float32:
    {primitives::float32}
    'float32'
    ;

float64 returns primitives::float64:
    {primitives::float64}
    'float64'
    ;

string0 returns primitives::string:
    {primitives::string}
    'string'
    ;

char returns primitives::char0:
    {primitives::char0}
    'char'
    ;

byte returns primitives::Byte:
    {primitives::Byte}
    'byte'
    ;

time returns primitives::time:
    {primitives::time}
    'time'
    ;

duration returns primitives::duration:
    {primitives::duration}
    'duration'
    ;

boolArray returns primitives::boolArray:
    {primitives::boolArray}
    'bool[]'
    ;

int8Array returns primitives::int8Array:
    {primitives::int8Array}
    'int8[]'
    ;

uint8Array returns primitives::uint8Array:
    {primitives::uint8Array}
    'uint8[]'
    ;

int16Array returns primitives::int16Array:
    {primitives::int16Array}
    'int16[]'
    ;

uint16Array returns primitives::uint16Array:
    {primitives::uint16Array}
    'uint16[]'
    ;

int32Array returns primitives::int32Array:
    {primitives::int32Array}
    'int32[]'
    ;

uint32Array returns primitives::uint32Array:
    {primitives::uint32Array}
    'uint32[]'
    ;

int64Array returns primitives::int64Array:
    {primitives::int64Array}
    'int64[]'
    ;

uint64Array returns primitives::uint64Array:
    {primitives::uint64Array}
    'uint64[]'
    ;

float32Array returns primitives::float32Array:
    {primitives::float32Array}
    'float32[]'
    ;

float64Array returns primitives::float64Array:
    {primitives::float64Array}
    'float64[]'
    ;

string0Array returns primitives::stringArray:
    {primitives::stringArray}
    'string[]'
    ;
byteArray returns primitives::ByteArray:
    {primitives::ByteArray}
    'byte[]'
    ;
charArray returns primitives::charArray:
    {primitives::charArray}
    'char[]'
    ;

Header returns primitives::Header:
    {primitives::Header}
    'Header'
;

SpecBaseRef returns TopicSpecMsgRef:
    Reference=[TopicSpec|EString]
;

ArraySpecRef returns ArrayTopicSpecMsgRef:
    Reference=[TopicSpec|EString]'[]'
;

KEYWORD: 'goal' | 'message' | 'result' | 'feedback' | 'name' | 'value' | 'service' | 'type' | 'action' | 'duration' | 'time'  ;

///////////////////
// YAML format
///////////////////
terminal BEGIN: 'synthetic:BEGIN';
terminal END: 'synthetic:END';

@Override
terminal SL_COMMENT: '#' !('\n'|'\r')*;

///////////////////
// CONVENTIONS AND NAMES
///////////////////
EString returns ecore::EString:
    STRING | ID;

RosNames returns ecore::EString:
    ROS_CONVENTION_A | ID | 'node'
;

terminal ROS_CONVENTION_A:
    ( ('/' ID ) | ( ID '/' ) )* ;

terminal ROS_CONVENTION_PARAM:
    ( ('/' STRING ) | ( STRING '/' ) | ('~' STRING ) )* ;
