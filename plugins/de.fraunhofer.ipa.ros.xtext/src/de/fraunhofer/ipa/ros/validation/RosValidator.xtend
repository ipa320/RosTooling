/*
 * generated by Xtext 2.12.0
 */
package de.fraunhofer.ipa.ros.validation

import org.eclipse.xtend2.lib.StringConcatenation
import org.eclipse.xtext.validation.Check
import ros.ActionClient
import ros.ActionServer
import ros.Artifact
import ros.Node
import ros.Package
import ros.PackageSet
import ros.Parameter
import ros.Publisher
import ros.ServiceClient
import ros.ServiceServer
import ros.Subscriber

/**
 * This class contains custom validation rules. 
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
class RosValidator extends AbstractRosValidator {

  public static val INVALID_NAME = 'invalidName'
  public static val PARAMETER_HELP = 'paramInfo'
  public static val SORT_INTERFACES = 'softInterfaces'
  StringConcatenation _builder;
  Boolean UnOrganizedAttributes;
  String helper_string;
  
  @Check
  def void UnOrganizedAttributes (PackageSet packageset) {
  		UnOrganizedAttributes=false
  		_builder = new StringConcatenation();
  		_builder.append("PackageSet {");
  		_builder.newLine;
  		for(pkg: packageset.package){
  			_builder.append("  CatkinPackage "+pkg.name+" {")
  			_builder.newLine;
  			for (art: pkg.artifact){
	  			_builder.append("    Artifact "+art.name+" {")
	  			_builder.newLine;
	  			_builder.append("      Node { name "+art.node.name)
	  			_builder.newLine;
	  			if ((art.node.publisher.length>2 || art.node.subscriber.length>2  ||  art.node.serviceclient.length>2
	  				|| art.node.serviceserver.length>2 || art.node.actionclient.length>2  ||  art.node.actionserver.length>2) &&
	  				art.node.parameter.empty){ UnOrganizedAttributes=true }
	  				if(!art.node.publisher.empty){
	  					_builder.newLineIfNotEmpty;
	  					_builder.append("        Publishers {");
	  					_builder.newLine;
	  					helper_string="";
	  					for (pub: art.node.publisher){
	  						helper_string+="          Publisher { name "+pub.name+" message '"+pub.message.fullname.replace("/",".")+"' },\n";
	  					}
	  					helper_string= helper_string.substring(0, helper_string.length() - 2);
	  					_builder.append(helper_string);
	  					_builder.newLine;
	  					_builder.append("        }");
	  				}
	  				if(!art.node.subscriber.empty){
	  					_builder.newLineIfNotEmpty;
	  					_builder.append("        Subscribers {");
	  					_builder.newLine;
	  					helper_string="";
	  					for (sub: art.node.subscriber){
	  						helper_string+="          Subscriber { name "+sub.name+" message '"+sub.message.fullname.replace("/",".")+"' },\n";
	  					}
	  					helper_string= helper_string.substring(0, helper_string.length() - 2);
	  					_builder.append(helper_string);
	  					_builder.newLine;
	  					_builder.append("        }");
	  				}
	  				if(!art.node.serviceclient.empty){
	  					_builder.newLineIfNotEmpty;
	  					_builder.append("        ServiceClients {");
	  					_builder.newLine;
	  					helper_string="";
	  					for (srvc: art.node.serviceclient){
	  						helper_string+="          ServiceClient { name "+srvc.name+" service '"+srvc.service.fullname.replace("/",".")+"' },\n";
	  					}
	  					helper_string= helper_string.substring(0, helper_string.length() - 2);
	  					_builder.append(helper_string);
	  					_builder.newLine;
	  					_builder.append("        }");
	  				}
	  				if(!art.node.serviceserver.empty){
	  					_builder.newLineIfNotEmpty;
	  					_builder.append("        ServiceServers {");
	  					_builder.newLine;
	  					helper_string="";
	  					for (srvs: art.node.serviceserver){
	  						helper_string+="          ServiceServer { name "+srvs.name+" service '"+srvs.service.fullname.replace("/",".")+"' },\n";
	  					}
	  					helper_string= helper_string.substring(0, helper_string.length() - 2);
	  					_builder.append(helper_string);
	  					_builder.newLine;
	  					_builder.append("        }");
	  				}
	  				if(!art.node.actionclient.empty){
	  					_builder.newLineIfNotEmpty;
	  					_builder.append("        ActionClients {");
	  					_builder.newLine;
	  					helper_string="";
	  					for (actc: art.node.actionclient){
	  						helper_string+="          ActionClient { name "+actc.name+" action '"+actc.action.fullname.replace("/",".")+"' },\n";
	  					}
	  					helper_string= helper_string.substring(0, helper_string.length() - 2);
	  					_builder.append(helper_string);
	  					_builder.newLine;
	  					_builder.append("        }");
	  				}
	  				if(!art.node.actionserver.empty){
	  					_builder.newLineIfNotEmpty;
	  					_builder.append("        ActionServers {");
	  					_builder.newLine;
	  					helper_string="";
	  					for (acts: art.node.actionserver){
	  						helper_string+="          ActionServer { name "+acts.name+" action '"+acts.action.fullname.replace("/",".")+"' },\n";
	  					}
	  					helper_string= helper_string.substring(0, helper_string.length() - 2);
	  					_builder.append(helper_string);
	  					_builder.newLine;
	  					_builder.append("        }");
	  				}
		_builder.newLineIfNotEmpty;
  		_builder.append("      }")
		}
		_builder.append("}")
		}
		_builder.append("}}")
		if (UnOrganizedAttributes) {
			warning("Organize and clean the model", null, SORT_INTERFACES, _builder.toString);
		}
  }
		
  /* CAPITAL LETTERS */
  @Check
  def void checkNameConventionsNode (Node node) {
  	for (char c : node.name.toCharArray){
  		if (Character.isUpperCase(c)){
  			warning("The name of a node should follow the ROS naming conventions: Capital letters are not recommended", null, INVALID_NAME);
  		}
  	}}
  @Check
  def void checkNameConventionsArtifact (Artifact artifact) {
  	for (char c : artifact.name.toCharArray){
  		if (Character.isUpperCase(c)){
  			warning("The name of a artifact should follow the ROS naming conventions: Capital letters are not recommended", null, INVALID_NAME);
  		}
  	}}
  @Check
  def void checkNameConventionsPackage (Package rospackage) {
	for (char c : rospackage.name.toCharArray){
		if (Character.isUpperCase(c)){
			error("The name of a package has to follow the ROS naming conventions: Capital letters are not allowed", null, INVALID_NAME);
		}
 	}
  }
   @Check
  def void checkNameConventionsParameters (Parameter parameter) {
	for (char c : parameter.name.toCharArray){
		if (Character.isUpperCase(c)){
			warning("The name of a parameter has to follow the ROS naming conventions: Capital letters are not recommended", null, INVALID_NAME);
		}
 	}
  }
  
  /* Customize Syntax Error Messages */
  
   public static val INVALID_SPEC = 'invalidSpecRef'
   public static String SpecWarning = "## Quick Fixes available ##-
    - Add the dependency to the specifications project
    - Generate the .ros model for the specifications
      ->https://github.com/ipa320/ros-model/blob/master/docu/NewCommunicationObjects.md"
  
  /* For Topics */
  @Check
  def void CheckMsgsRefPublisher(Publisher pub){
  	if(pub.message.eContainer === null){
  		warning( SpecWarning, null, INVALID_SPEC)
  	}
  }
  
  @Check
  def void CheckMsgsRefSubscriber(Subscriber sub){
  	if(sub.message.eContainer === null){
  		warning( SpecWarning, null, INVALID_SPEC)
  	}
  }
  
  /* For Actions */
  @Check
  def void CheckMsgsRefActionClient(ActionClient act){
  	if(act.action.eContainer === null){
  		warning( SpecWarning, null, INVALID_SPEC)
  	}
  }
  
   @Check
  def void CheckMsgsRefActionServer(ActionServer act){
  	if(act.action.eContainer === null){
  		warning( SpecWarning, null, INVALID_SPEC)
  	}
  }
  
  /* For Services */
  @Check
  def void CheckMsgsRefServiceServer (ServiceServer ser){
  	if(ser.service.eContainer === null){
  		warning( SpecWarning, null, INVALID_SPEC)
  	}
  }
  
  @Check
  def void CheckMsgsRefServiceClient (ServiceClient ser){
  	if(ser.service.eContainer === null){
  		warning( SpecWarning, null, INVALID_SPEC)
  	}
  }
 
 
 /*Parameters Helper*/
  @Check
  def void BinaryHelp (Parameter param){
  	if(param.type.toString.contains("Base64") && !(param.toString.contains('0b') ||param.toString.contains('0B'))){
  		info("HELP: A binary value must start with '0b'", null, PARAMETER_HELP)
  	}
  }
 
   @Check
  def void ArrayHelp (Parameter param){
  	if(param.type.toString.contains("Array")){
  		info("HELP: Array parameter format:\n { type TYPE default {VALUE, VALUE} \n example:\n type Boolean default true, true} ", null, PARAMETER_HELP)
  	}
  }
   
  @Check
  def void ListHelp (Parameter param){
  	if(param.type.toString.contains("List")){
  		info("HELP: List parameter format:\n { TYPE default VALUE,TYPE default VALUE }\n example:\n Integer default 5, Boolean default true ", null, PARAMETER_HELP)
  	}
  }
  
  @Check
  def void StructHelp (Parameter param){
  	if(param.type.toString.contains("Struct")){
  		info("HELP: Struct parameter format:\n { NAME TYPE default VALUE, NAME TYPE default VALUE }\n example:\n my_int Integer {default 5}, my_bool Boolean default true ", null, PARAMETER_HELP)
  	}
  }
  
   //The RULE_ID impose the rest of the ROS naming convention rules : bin/de/fraunhofer/ipa/ros/parser/antlr/internal/InternalRos.g
  // allow the use only of the symbol: "_"
  // allow the use of numbers
  
 }


