// automatically generated by Xtext
grammar de.fraunhofer.ipa.ros.Ros with de.fraunhofer.ipa.ros.Basics

import "http://www.ipa.fraunhofer.de/ros"
import "http://www.ipa.fraunhofer.de/primitives" as primitives
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://www.eclipse.org/emf/2003/XMLType" as type

PackageSet returns PackageSet:
    {PackageSet}
    package+=Package_Impl*
    ;

///////////////////
//PACKAGES
///////////////////
Package returns Package:
    Package_Impl //|
    //CatkinPackage |
    //AmentPackage
    ;

Package_Impl returns Package:
    {Package}
    name=RosNames':'
    BEGIN
        ('fromGitRepo:' fromGitRepo=EString)?
        ('specs:'
            BEGIN
            PreListElement spec+=SpecBase
            (PreListElement spec+=SpecBase)*
            END
        )?
        ('dependencies:' '[' dependency+=Dependency (',' dependency+=Dependency)* ']' )?
    END;

//CatkinPackage returns CatkinPackage:
//  {CatkinPackage}
//  name=RosNames':'
//  BEGIN
//      ('fromGitRepo:' fromGitRepo=EString)?
//      ('artifacts:'
//          BEGIN
//          artifact+=Artifact*
//          END
//      )?
//      ('dependencies:' '[' dependency+=Dependency (',' dependency+=Dependency)* ']' )?
//  END;
//
//AmentPackage returns AmentPackage:
//  {AmentPackage}
//  'AmentPackage'
//  name=RosNames':'
//  BEGIN
//      ('fromGitRepo:' fromGitRepo=EString)?
//      ('artifacts:'
//          BEGIN
//          artifact+=Artifact*
//          END
//      )?
//      ('dependencies:' '[' dependency+=Dependency (',' dependency+=Dependency)* ']' )?
//  END;

///////////////////
//ARTIFACT AND NODE
///////////////////
Artifact returns Artifact:
    {Artifact}
        name=RosNames':'
        BEGIN
        (node=Node)?
        END;

Node returns Node:
    'node:' name=RosNames
    (
    ('publishers:'
        BEGIN
        publisher+=Publisher*
        END
    )|
    ('subscribers:'
        BEGIN
        subscriber+=Subscriber*
        END
    )|
    ('serviceServers:'
        BEGIN
        serviceserver+=ServiceServer*
        END
    )|
    ('serviceClients:'
        BEGIN
        serviceclient+=ServiceClient*
        END
    )|
    ('actionServers:'
        BEGIN
        actionserver+=ActionServer*
        END
    )|
    ('actionClients:'
        BEGIN
        actionclient+=ActionClient*
        END
    )|
    ('parameters:'
        BEGIN
        parameter+=Parameter*
        END
    )
    )*
    ;

///////////////////
//OBJECTS/SPECIFICATIONS
///////////////////
SpecBase returns SpecBase:
    TopicSpec | ServiceSpec | ActionSpec;

TopicSpec returns TopicSpec:
    {TopicSpec}
    'msg:'name=(EString|'Header'|'String')
    BEGIN
        'message:' (BEGIN message=MessageDefinition END)?
    END
    ;

ServiceSpec returns ServiceSpec:
    {ServiceSpec}
    'srv:'name=EString
    BEGIN
        'request:' (BEGIN request=MessageDefinition END)?
        'response:' (BEGIN response=MessageDefinition END)?
    END;

ActionSpec returns ActionSpec:
    {ActionSpec}
    'action:'name=EString
    BEGIN
        'goal:' (BEGIN goal=MessageDefinition END)?
        'result:' (BEGIN result=MessageDefinition END)?
        'feedback:' (BEGIN feedback=MessageDefinition END)?
    END;


MessageDefinition returns MessageDefinition:
    {MessageDefinition}
        MessagePart+=MessagePart+;

///////////////////
//INTERFACES
///////////////////
Publisher returns Publisher:
    {Publisher}
        name=EString':'
        BEGIN
            'type:' message=[TopicSpec|EString]
            ('ns:' namespace=Namespace)?
        END
    ;

Subscriber returns Subscriber:
    {Subscriber}
        name=EString':'
        BEGIN
            'type:' message=[TopicSpec|EString]
            ('ns:' namespace=Namespace)?
        END
    ;

ServiceServer returns ServiceServer:
    {ServiceServer}
        name=EString':'
        BEGIN
            'type:' service=[ServiceSpec|EString]
            ('ns:' namespace=Namespace)?
        END
    ;

ServiceClient returns ServiceClient:
    {ServiceClient}
        name=EString':'
        BEGIN
            'type:' service=[ServiceSpec|EString]
            ('ns:' namespace=Namespace)?
        END
    ;

ActionServer returns ActionServer:
    {ActionServer}
        name=EString':'
        BEGIN
            'type:' action=[ActionSpec|EString]
            ('ns:' namespace=Namespace)?
        END
    ;

ActionClient returns ActionClient:
    {ActionClient}
        name=EString':'
        BEGIN
            'type:' action=[ActionSpec|EString]
            ('ns:' namespace=Namespace)?
        END
    ;

///////////////////
//DEPENDENCIES
///////////////////
Dependency returns Dependency:
    PackageDependency | ExternalDependency;

PackageDependency returns PackageDependency:
    package=[Package|EString];

ExternalDependency returns ExternalDependency:
    {ExternalDependency}
    'ExternalDependency'
    name=EString;
