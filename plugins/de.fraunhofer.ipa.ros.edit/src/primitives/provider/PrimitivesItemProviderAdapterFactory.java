/**
 */
package primitives.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import primitives.util.PrimitivesAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class PrimitivesItemProviderAdapterFactory extends PrimitivesAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier {
    /**
     * This keeps track of the root adapter factory that delegates to this adapter factory.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected ComposedAdapterFactory parentAdapterFactory;

    /**
     * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected IChangeNotifier changeNotifier = new ChangeNotifier();

    /**
     * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected Collection<Object> supportedTypes = new ArrayList<Object>();

    /**
     * This constructs an instance.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public PrimitivesItemProviderAdapterFactory() {
        supportedTypes.add(IEditingDomainItemProvider.class);
        supportedTypes.add(IStructuredItemContentProvider.class);
        supportedTypes.add(ITreeItemContentProvider.class);
        supportedTypes.add(IItemLabelProvider.class);
        supportedTypes.add(IItemPropertySource.class);
    }

    /**
     * This keeps track of the one adapter used for all {@link primitives.MessagePart} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected MessagePartItemProvider messagePartItemProvider;

    /**
     * This creates an adapter for a {@link primitives.MessagePart}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createMessagePartAdapter() {
        if (messagePartItemProvider == null) {
            messagePartItemProvider = new MessagePartItemProvider(this);
        }

        return messagePartItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link primitives.bool} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected boolItemProvider boolItemProvider;

    /**
     * This creates an adapter for a {@link primitives.bool}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createboolAdapter() {
        if (boolItemProvider == null) {
            boolItemProvider = new boolItemProvider(this);
        }

        return boolItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link primitives.int8} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected int8ItemProvider int8ItemProvider;

    /**
     * This creates an adapter for a {@link primitives.int8}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createint8Adapter() {
        if (int8ItemProvider == null) {
            int8ItemProvider = new int8ItemProvider(this);
        }

        return int8ItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link primitives.uint8} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected uint8ItemProvider uint8ItemProvider;

    /**
     * This creates an adapter for a {@link primitives.uint8}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createuint8Adapter() {
        if (uint8ItemProvider == null) {
            uint8ItemProvider = new uint8ItemProvider(this);
        }

        return uint8ItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link primitives.int16} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected int16ItemProvider int16ItemProvider;

    /**
     * This creates an adapter for a {@link primitives.int16}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createint16Adapter() {
        if (int16ItemProvider == null) {
            int16ItemProvider = new int16ItemProvider(this);
        }

        return int16ItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link primitives.uint16} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected uint16ItemProvider uint16ItemProvider;

    /**
     * This creates an adapter for a {@link primitives.uint16}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createuint16Adapter() {
        if (uint16ItemProvider == null) {
            uint16ItemProvider = new uint16ItemProvider(this);
        }

        return uint16ItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link primitives.int32} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected int32ItemProvider int32ItemProvider;

    /**
     * This creates an adapter for a {@link primitives.int32}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createint32Adapter() {
        if (int32ItemProvider == null) {
            int32ItemProvider = new int32ItemProvider(this);
        }

        return int32ItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link primitives.uint32} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected uint32ItemProvider uint32ItemProvider;

    /**
     * This creates an adapter for a {@link primitives.uint32}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createuint32Adapter() {
        if (uint32ItemProvider == null) {
            uint32ItemProvider = new uint32ItemProvider(this);
        }

        return uint32ItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link primitives.int64} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected int64ItemProvider int64ItemProvider;

    /**
     * This creates an adapter for a {@link primitives.int64}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createint64Adapter() {
        if (int64ItemProvider == null) {
            int64ItemProvider = new int64ItemProvider(this);
        }

        return int64ItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link primitives.uint64} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected uint64ItemProvider uint64ItemProvider;

    /**
     * This creates an adapter for a {@link primitives.uint64}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createuint64Adapter() {
        if (uint64ItemProvider == null) {
            uint64ItemProvider = new uint64ItemProvider(this);
        }

        return uint64ItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link primitives.float32} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected float32ItemProvider float32ItemProvider;

    /**
     * This creates an adapter for a {@link primitives.float32}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createfloat32Adapter() {
        if (float32ItemProvider == null) {
            float32ItemProvider = new float32ItemProvider(this);
        }

        return float32ItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link primitives.float64} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected float64ItemProvider float64ItemProvider;

    /**
     * This creates an adapter for a {@link primitives.float64}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createfloat64Adapter() {
        if (float64ItemProvider == null) {
            float64ItemProvider = new float64ItemProvider(this);
        }

        return float64ItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link primitives.string} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected stringItemProvider stringItemProvider;

    /**
     * This creates an adapter for a {@link primitives.string}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createstringAdapter() {
        if (stringItemProvider == null) {
            stringItemProvider = new stringItemProvider(this);
        }

        return stringItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link primitives.time} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected timeItemProvider timeItemProvider;

    /**
     * This creates an adapter for a {@link primitives.time}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createtimeAdapter() {
        if (timeItemProvider == null) {
            timeItemProvider = new timeItemProvider(this);
        }

        return timeItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link primitives.duration} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected durationItemProvider durationItemProvider;

    /**
     * This creates an adapter for a {@link primitives.duration}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createdurationAdapter() {
        if (durationItemProvider == null) {
            durationItemProvider = new durationItemProvider(this);
        }

        return durationItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link primitives.boolArray} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected boolArrayItemProvider boolArrayItemProvider;

    /**
     * This creates an adapter for a {@link primitives.boolArray}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createboolArrayAdapter() {
        if (boolArrayItemProvider == null) {
            boolArrayItemProvider = new boolArrayItemProvider(this);
        }

        return boolArrayItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link primitives.int8Array} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected int8ArrayItemProvider int8ArrayItemProvider;

    /**
     * This creates an adapter for a {@link primitives.int8Array}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createint8ArrayAdapter() {
        if (int8ArrayItemProvider == null) {
            int8ArrayItemProvider = new int8ArrayItemProvider(this);
        }

        return int8ArrayItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link primitives.uint8Array} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected uint8ArrayItemProvider uint8ArrayItemProvider;

    /**
     * This creates an adapter for a {@link primitives.uint8Array}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createuint8ArrayAdapter() {
        if (uint8ArrayItemProvider == null) {
            uint8ArrayItemProvider = new uint8ArrayItemProvider(this);
        }

        return uint8ArrayItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link primitives.int16Array} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected int16ArrayItemProvider int16ArrayItemProvider;

    /**
     * This creates an adapter for a {@link primitives.int16Array}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createint16ArrayAdapter() {
        if (int16ArrayItemProvider == null) {
            int16ArrayItemProvider = new int16ArrayItemProvider(this);
        }

        return int16ArrayItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link primitives.uint16Array} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected uint16ArrayItemProvider uint16ArrayItemProvider;

    /**
     * This creates an adapter for a {@link primitives.uint16Array}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createuint16ArrayAdapter() {
        if (uint16ArrayItemProvider == null) {
            uint16ArrayItemProvider = new uint16ArrayItemProvider(this);
        }

        return uint16ArrayItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link primitives.int32Array} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected int32ArrayItemProvider int32ArrayItemProvider;

    /**
     * This creates an adapter for a {@link primitives.int32Array}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createint32ArrayAdapter() {
        if (int32ArrayItemProvider == null) {
            int32ArrayItemProvider = new int32ArrayItemProvider(this);
        }

        return int32ArrayItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link primitives.uint32Array} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected uint32ArrayItemProvider uint32ArrayItemProvider;

    /**
     * This creates an adapter for a {@link primitives.uint32Array}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createuint32ArrayAdapter() {
        if (uint32ArrayItemProvider == null) {
            uint32ArrayItemProvider = new uint32ArrayItemProvider(this);
        }

        return uint32ArrayItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link primitives.int64Array} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected int64ArrayItemProvider int64ArrayItemProvider;

    /**
     * This creates an adapter for a {@link primitives.int64Array}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createint64ArrayAdapter() {
        if (int64ArrayItemProvider == null) {
            int64ArrayItemProvider = new int64ArrayItemProvider(this);
        }

        return int64ArrayItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link primitives.uint64Array} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected uint64ArrayItemProvider uint64ArrayItemProvider;

    /**
     * This creates an adapter for a {@link primitives.uint64Array}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createuint64ArrayAdapter() {
        if (uint64ArrayItemProvider == null) {
            uint64ArrayItemProvider = new uint64ArrayItemProvider(this);
        }

        return uint64ArrayItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link primitives.float32Array} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected float32ArrayItemProvider float32ArrayItemProvider;

    /**
     * This creates an adapter for a {@link primitives.float32Array}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createfloat32ArrayAdapter() {
        if (float32ArrayItemProvider == null) {
            float32ArrayItemProvider = new float32ArrayItemProvider(this);
        }

        return float32ArrayItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link primitives.float64Array} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected float64ArrayItemProvider float64ArrayItemProvider;

    /**
     * This creates an adapter for a {@link primitives.float64Array}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createfloat64ArrayAdapter() {
        if (float64ArrayItemProvider == null) {
            float64ArrayItemProvider = new float64ArrayItemProvider(this);
        }

        return float64ArrayItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link primitives.stringArray} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected stringArrayItemProvider stringArrayItemProvider;

    /**
     * This creates an adapter for a {@link primitives.stringArray}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createstringArrayAdapter() {
        if (stringArrayItemProvider == null) {
            stringArrayItemProvider = new stringArrayItemProvider(this);
        }

        return stringArrayItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link primitives.Header} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected HeaderItemProvider headerItemProvider;

    /**
     * This creates an adapter for a {@link primitives.Header}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createHeaderAdapter() {
        if (headerItemProvider == null) {
            headerItemProvider = new HeaderItemProvider(this);
        }

        return headerItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link primitives.Byte} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected ByteItemProvider byteItemProvider;

    /**
     * This creates an adapter for a {@link primitives.Byte}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createByteAdapter() {
        if (byteItemProvider == null) {
            byteItemProvider = new ByteItemProvider(this);
        }

        return byteItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link primitives.ByteArray} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected ByteArrayItemProvider byteArrayItemProvider;

    /**
     * This creates an adapter for a {@link primitives.ByteArray}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createByteArrayAdapter() {
        if (byteArrayItemProvider == null) {
            byteArrayItemProvider = new ByteArrayItemProvider(this);
        }

        return byteArrayItemProvider;
    }

    /**
     * This returns the root adapter factory that contains this factory.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public ComposeableAdapterFactory getRootAdapterFactory() {
        return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
    }

    /**
     * This sets the composed adapter factory that contains this factory.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
        this.parentAdapterFactory = parentAdapterFactory;
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public boolean isFactoryForType(Object type) {
        return supportedTypes.contains(type) || super.isFactoryForType(type);
    }

    /**
     * This implementation substitutes the factory itself as the key for the adapter.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter adapt(Notifier notifier, Object type) {
        return super.adapt(notifier, this);
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Object adapt(Object object, Object type) {
        if (isFactoryForType(type)) {
            Object adapter = super.adapt(object, type);
            if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
                return adapter;
            }
        }

        return null;
    }

    /**
     * This adds a listener.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public void addListener(INotifyChangedListener notifyChangedListener) {
        changeNotifier.addListener(notifyChangedListener);
    }

    /**
     * This removes a listener.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public void removeListener(INotifyChangedListener notifyChangedListener) {
        changeNotifier.removeListener(notifyChangedListener);
    }

    /**
     * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public void fireNotifyChanged(Notification notification) {
        changeNotifier.fireNotifyChanged(notification);

        if (parentAdapterFactory != null) {
            parentAdapterFactory.fireNotifyChanged(notification);
        }
    }

}
