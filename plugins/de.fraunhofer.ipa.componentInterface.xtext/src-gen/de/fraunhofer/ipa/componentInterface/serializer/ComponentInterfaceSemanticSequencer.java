/*
 * generated by Xtext 2.23.0
 */
package de.fraunhofer.ipa.componentInterface.serializer;

import com.google.inject.Inject;
import componentInterface.ComponentInterface;
import componentInterface.ComponentInterfacePackage;
import componentInterface.RosActionClient;
import componentInterface.RosActionServer;
import componentInterface.RosParameter;
import componentInterface.RosPublisher;
import componentInterface.RosServiceClient;
import componentInterface.RosServiceServer;
import componentInterface.RosSubscriber;
import de.fraunhofer.ipa.componentInterface.services.ComponentInterfaceGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import ros.ParameterBase64;
import ros.ParameterBoolean;
import ros.ParameterDouble;
import ros.ParameterInteger;
import ros.ParameterSequence;
import ros.ParameterString;
import ros.ParameterStruct;
import ros.ParameterStructMember;
import ros.RosPackage;

@SuppressWarnings("all")
public class ComponentInterfaceSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private ComponentInterfaceGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == ComponentInterfacePackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case ComponentInterfacePackage.COMPONENT_INTERFACE:
				sequence_ComponentInterface(context, (ComponentInterface) semanticObject); 
				return; 
			case ComponentInterfacePackage.ROS_ACTION_CLIENT:
				sequence_RosActionClient(context, (RosActionClient) semanticObject); 
				return; 
			case ComponentInterfacePackage.ROS_ACTION_SERVER:
				sequence_RosActionServer(context, (RosActionServer) semanticObject); 
				return; 
			case ComponentInterfacePackage.ROS_PARAMETER:
				sequence_RosParameter(context, (RosParameter) semanticObject); 
				return; 
			case ComponentInterfacePackage.ROS_PUBLISHER:
				sequence_RosPublisher(context, (RosPublisher) semanticObject); 
				return; 
			case ComponentInterfacePackage.ROS_SERVICE_CLIENT:
				sequence_RosServiceClient(context, (RosServiceClient) semanticObject); 
				return; 
			case ComponentInterfacePackage.ROS_SERVICE_SERVER:
				sequence_RosServiceServer(context, (RosServiceServer) semanticObject); 
				return; 
			case ComponentInterfacePackage.ROS_SUBSCRIBER:
				sequence_RosSubscriber(context, (RosSubscriber) semanticObject); 
				return; 
			}
		else if (epackage == RosPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case RosPackage.PARAMETER_BASE64:
				sequence_ParameterBase64(context, (ParameterBase64) semanticObject); 
				return; 
			case RosPackage.PARAMETER_BOOLEAN:
				sequence_ParameterBoolean(context, (ParameterBoolean) semanticObject); 
				return; 
			case RosPackage.PARAMETER_DOUBLE:
				sequence_ParameterDouble(context, (ParameterDouble) semanticObject); 
				return; 
			case RosPackage.PARAMETER_INTEGER:
				sequence_ParameterInteger(context, (ParameterInteger) semanticObject); 
				return; 
			case RosPackage.PARAMETER_SEQUENCE:
				if (rule == grammarAccess.getParameterArrayRule()) {
					sequence_ParameterArray(context, (ParameterSequence) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getParameterValueRule()
						|| rule == grammarAccess.getParameterListRule()) {
					sequence_ParameterList(context, (ParameterSequence) semanticObject); 
					return; 
				}
				else break;
			case RosPackage.PARAMETER_STRING:
				sequence_ParameterString(context, (ParameterString) semanticObject); 
				return; 
			case RosPackage.PARAMETER_STRUCT:
				sequence_ParameterStruct(context, (ParameterStruct) semanticObject); 
				return; 
			case RosPackage.PARAMETER_STRUCT_MEMBER:
				sequence_ParameterStructMember(context, (ParameterStructMember) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     ComponentInterface returns ComponentInterface
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         NameSpace=EString? 
	 *         (
	 *             (rospublisher+=RosPublisher rospublisher+=RosPublisher*) | 
	 *             (rossubscriber+=RosSubscriber rossubscriber+=RosSubscriber*) | 
	 *             (rosserviceserver+=RosServiceServer rosserviceserver+=RosServiceServer*) | 
	 *             (rosserviceclient+=RosServiceClient rosserviceclient+=RosServiceClient*) | 
	 *             (rosactionserver+=RosActionServer rosactionserver+=RosActionServer*) | 
	 *             (rosactionclient+=RosActionClient rosactionclient+=RosActionClient*) | 
	 *             (rosparameter+=RosParameter rosparameter+=RosParameter*)
	 *         )*
	 *     )
	 */
	protected void sequence_ComponentInterface(ISerializationContext context, ComponentInterface semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ParameterArray returns ParameterSequence
	 *
	 * Constraint:
	 *     (value+=ParameterValue value+=ParameterValue*)
	 */
	protected void sequence_ParameterArray(ISerializationContext context, ParameterSequence semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ParameterValue returns ParameterBase64
	 *     ParameterBase64 returns ParameterBase64
	 *
	 * Constraint:
	 *     value=Base64Binary
	 */
	protected void sequence_ParameterBase64(ISerializationContext context, ParameterBase64 semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, RosPackage.Literals.PARAMETER_BASE64__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RosPackage.Literals.PARAMETER_BASE64__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getParameterBase64Access().getValueBase64BinaryParserRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ParameterValue returns ParameterBoolean
	 *     ParameterBoolean returns ParameterBoolean
	 *
	 * Constraint:
	 *     value=boolean0
	 */
	protected void sequence_ParameterBoolean(ISerializationContext context, ParameterBoolean semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, RosPackage.Literals.PARAMETER_BOOLEAN__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RosPackage.Literals.PARAMETER_BOOLEAN__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getParameterBooleanAccess().getValueBoolean0ParserRuleCall_0(), semanticObject.isValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ParameterValue returns ParameterDouble
	 *     ParameterDouble returns ParameterDouble
	 *
	 * Constraint:
	 *     value=Double0
	 */
	protected void sequence_ParameterDouble(ISerializationContext context, ParameterDouble semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, RosPackage.Literals.PARAMETER_DOUBLE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RosPackage.Literals.PARAMETER_DOUBLE__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getParameterDoubleAccess().getValueDouble0ParserRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ParameterValue returns ParameterInteger
	 *     ParameterInteger returns ParameterInteger
	 *
	 * Constraint:
	 *     value=Integer0
	 */
	protected void sequence_ParameterInteger(ISerializationContext context, ParameterInteger semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, RosPackage.Literals.PARAMETER_INTEGER__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RosPackage.Literals.PARAMETER_INTEGER__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getParameterIntegerAccess().getValueInteger0ParserRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ParameterValue returns ParameterSequence
	 *     ParameterList returns ParameterSequence
	 *
	 * Constraint:
	 *     (value+=ParameterValue value+=ParameterValue*)
	 */
	protected void sequence_ParameterList(ISerializationContext context, ParameterSequence semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ParameterValue returns ParameterString
	 *     ParameterString returns ParameterString
	 *
	 * Constraint:
	 *     value=EString
	 */
	protected void sequence_ParameterString(ISerializationContext context, ParameterString semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, RosPackage.Literals.PARAMETER_STRING__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RosPackage.Literals.PARAMETER_STRING__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getParameterStringAccess().getValueEStringParserRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ParameterStructMember returns ParameterStructMember
	 *
	 * Constraint:
	 *     (name=EString value=ParameterValue)
	 */
	protected void sequence_ParameterStructMember(ISerializationContext context, ParameterStructMember semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, RosPackage.Literals.PARAMETER_STRUCT_MEMBER__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RosPackage.Literals.PARAMETER_STRUCT_MEMBER__NAME));
			if (transientValues.isValueTransient(semanticObject, RosPackage.Literals.PARAMETER_STRUCT_MEMBER__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RosPackage.Literals.PARAMETER_STRUCT_MEMBER__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getParameterStructMemberAccess().getNameEStringParserRuleCall_0_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getParameterStructMemberAccess().getValueParameterValueParserRuleCall_3_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ParameterValue returns ParameterStruct
	 *     ParameterStruct returns ParameterStruct
	 *
	 * Constraint:
	 *     (value+=ParameterStructMember value+=ParameterStructMember*)?
	 */
	protected void sequence_ParameterStruct(ISerializationContext context, ParameterStruct semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     RosActionClient returns RosActionClient
	 *
	 * Constraint:
	 *     (name=EString? ns=EString? actclient=[ActionClient|EString])
	 */
	protected void sequence_RosActionClient(ISerializationContext context, RosActionClient semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     RosActionServer returns RosActionServer
	 *
	 * Constraint:
	 *     (name=EString? ns=EString? actserver=[ActionServer|EString])
	 */
	protected void sequence_RosActionServer(ISerializationContext context, RosActionServer semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     RosParameter returns RosParameter
	 *
	 * Constraint:
	 *     (name=EString? ns=EString? parameter=[Parameter|EString] value=ParameterValue?)
	 */
	protected void sequence_RosParameter(ISerializationContext context, RosParameter semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     RosPublisher returns RosPublisher
	 *
	 * Constraint:
	 *     (name=EString? ns=EString? publisher=[Publisher|EString])
	 */
	protected void sequence_RosPublisher(ISerializationContext context, RosPublisher semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     RosServiceClient returns RosServiceClient
	 *
	 * Constraint:
	 *     (name=EString? ns=EString? srvclient=[ServiceClient|EString])
	 */
	protected void sequence_RosServiceClient(ISerializationContext context, RosServiceClient semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     RosServiceServer returns RosServiceServer
	 *
	 * Constraint:
	 *     (name=EString? ns=EString? srvserver=[ServiceServer|EString])
	 */
	protected void sequence_RosServiceServer(ISerializationContext context, RosServiceServer semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     RosSubscriber returns RosSubscriber
	 *
	 * Constraint:
	 *     (name=EString? ns=EString? subscriber=[Subscriber|EString])
	 */
	protected void sequence_RosSubscriber(ISerializationContext context, RosSubscriber semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
