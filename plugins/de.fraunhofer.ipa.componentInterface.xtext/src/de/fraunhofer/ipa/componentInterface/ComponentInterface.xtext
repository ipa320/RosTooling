// automatically generated by Xtext
grammar de.fraunhofer.ipa.componentInterface.ComponentInterface with org.eclipse.xtext.common.Terminals

import "http://www.ipa.fraunhofer.de/componentInterface" 
import "http://www.ipa.fraunhofer.de/ros" as ros
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://www.eclipse.org/emf/2003/XMLType" as type

ComponentInterface returns ComponentInterface:
	'ComponentInterface'
	'{'
		'name' name=EString
		('NameSpace' NameSpace=EString)?
		(('RosPublishers' '{' rospublisher+=RosPublisher ( "," rospublisher+=RosPublisher)* '}' )? &
		('RosSubscribers' '{' rossubscriber+=RosSubscriber ( "," rossubscriber+=RosSubscriber)* '}' )? &
		('RosSrvServers' '{' rosserviceserver+=RosServiceServer ( "," rosserviceserver+=RosServiceServer)* '}' )? &
		('RosSrvClients' '{' rosserviceclient+=RosServiceClient ( "," rosserviceclient+=RosServiceClient)* '}' )? &
		('RosActionServers' '{' rosactionserver+=RosActionServer ( "," rosactionserver+=RosActionServer)* '}' )? &
		('RosActionClients' '{' rosactionclient+=RosActionClient ( "," rosactionclient+=RosActionClient)* '}' )? &
		('RosParameters' '{' rosparameter+=RosParameter ( "," rosparameter+=RosParameter)* '}' )?)
	'}';


RosPublisher returns RosPublisher:
	{RosPublisher}
	'RosPublisher'
	(name=EString)?
	'{'
		('ns' ns=EString)?
		'RefPublisher' publisher=[ros::Publisher|EString]
	'}';

RosSubscriber returns RosSubscriber:
	{RosSubscriber}
	'RosSubscriber'
	(name=EString)?
	'{'
		('ns' ns=EString)?
		'RefSubscriber' subscriber=[ros::Subscriber|EString]
	'}';

RosServiceServer returns RosServiceServer:
	{RosServiceServer}
	'RosServiceServer'
	(name=EString)?
	'{'
		('ns' ns=EString)?
		'RefServer' srvserver=[ros::ServiceServer|EString]
	'}';

RosServiceClient returns RosServiceClient:
	{RosServiceClient}
	'RosServiceClient'
	(name=EString)?
	'{'
		('ns' ns=EString)?
		'RefClient' srvclient=[ros::ServiceClient|EString]
	'}';

RosActionServer returns RosActionServer:
	{RosActionServer}
	'RosActionServer'
	(name=EString)?
	'{'
		('ns' ns=EString)?
		'RefServer' actserver=[ros::ActionServer|EString]
	'}';

RosActionClient returns RosActionClient:
	{RosActionClient}
	'RosActionClient'
	(name=EString)?
	'{'
		('ns' ns=EString)?
		'RefClient' actclient=[ros::ActionClient|EString]
	'}';
	
RosParameter returns RosParameter:
{RosParameter}
'RosParameter'
(name=EString)?
'{'
	('ns' ns=EString)?
	'RefParameter' parameter=[ros::Parameter|EString]
	('value' value=ParameterValue)?
'}';
	
EString returns ecore::EString:
	STRING | ID;

NS returns NS:
	'NS' /* TODO: implement this rule and an appropriate IValueConverter */;

// PARAMETERS!!

ParameterValue returns ros::ParameterValue:
	ParameterDouble|ParameterBoolean| ParameterInteger |
	 ParameterBase64 | ParameterList | ParameterStruct | ParameterString  ;
	


ParameterString returns ros::ParameterString:
	value=EString
;

ParameterBase64 returns ros::ParameterBase64:
	value=Base64Binary
;

ParameterInteger returns ros::ParameterInteger:
	value=Integer0
;

ParameterDouble returns ros::ParameterDouble:
	value=Double0
;

ParameterBoolean returns ros::ParameterBoolean:
	value=boolean0
;

ParameterList returns ros::ParameterSequence:
	{ros::ParameterSequence}
		'{'	value+=ParameterValue ( ',' value+=ParameterValue )* '}'
;

ParameterArray returns ros::ParameterSequence:
	{ros::ParameterSequence}
		'{'	value+=ParameterValue ( ',' value+=ParameterValue )* '}'
;


ParameterStruct returns ros::ParameterStruct:
	{ros::ParameterStruct} 
		('{' value+=ParameterStructMember  ( "," '{' value+=ParameterStructMember '}')*  '}' )?
;

ParameterStructMember returns ros::ParameterStructMember:
	name=EString
	'{'
		'value' value=ParameterValue
	'}';


//PARAMETRES PRIMITIVES TYPES
terminal fragment DIGIT: '0'..'9';

terminal BINARY: ('0b'|'0B')('0'|'1')+;

terminal BOOLEAN: 'true'|'false';
terminal DOUBLE returns ecore::EDouble: DECINT (('.' DIGIT*) | (('.' DIGIT*)? ('E'|'e') ('-'|'+')? DECINT));  // Use terminal to avoid 'e' turning into a keyword
terminal DECINT: '0' | ('1'..'9' DIGIT*) | ('-''0'..'9' DIGIT*) ;
terminal DAY:'1'..'9' | '1'..'3' '0'..'9';
terminal MONTH:'1'..'9' | '1' '0'..'2';
terminal YEAR:'0'..'2' '0'..'9' '0'..'9' '0'..'9';
terminal HOUR: ('0'..'1')('0'..'9') | ('2')('0'..'3');
terminal MIN_SEC:('0'..'5')('0'..'9');
terminal DATE_TIME: YEAR'-'MONTH'-'DAY'T'HOUR':'MIN_SEC':'MIN_SEC;

Base64Binary returns type::Base64Binary:
	BINARY ;

boolean0 returns type::Boolean:
	BOOLEAN;

Double0 returns type::Double:
	DOUBLE;

Integer0 returns type::Int:
	DECINT;

DateTime0 returns type::DateTime:
	DATE_TIME;
