/*
 * generated by Xtext 2.25.0
 */
package de.fraunhofer.ipa.rossystem.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import system.System
import com.google.inject.Inject
import system.RosNode

/**
 * Generates code from your model files on save.
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class RosSystemGenerator extends AbstractGenerator {
    @Inject extension LaunchFileCompiler_ROS2
    @Inject extension YamlFileCompiler_ROS2
    @Inject extension SetupPyCompiler
    @Inject extension PackageXmlCompiler
    @Inject extension CMakeListsCompiler
    @Inject extension READMECompiler
    @Inject extension PlantUMLCompiler
    @Inject extension GeneratorHelpers
    @Inject extension Ros1BridgesYamlFileCompiler

    override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
        var yaml_gen = false
        for (system : resource.allContents.toIterable.filter(System)){
            fsa.generateFile(
                system.getName().toLowerCase+"/README.md",
                compile_toREADME(system).toString().replace("\t","  ")
            )
            fsa.generateFile(
                system.getName().toLowerCase+"/resource/" + system.getName().toLowerCase + ".puml",
                compile_plantuml(system)
            )
            if (system.fromFile.isNullOrEmpty) {
                fsa.generateFile(
                    system.getName().toLowerCase+"/launch/"+system.getName()+".launch.py",
                    compile_toROS2launch(system).toString().replace("\t","  ")
                )
                for (component: system.components){
                    if(component.eClass.name == "RosNode"){
                        if(!(component as RosNode).rosparameters.nullOrEmpty){
                            yaml_gen=true
                            fsa.generateFile(
                                system.getName().toLowerCase+"/config/"+(component as RosNode).getName()+".yaml",
                                compile_toROS2yaml(component as RosNode).toString().replace("\t","  ")
                            )
                    }}
                }
                fsa.generateFile(
                    system.getName().toLowerCase+"/package.xml",
                    compile_package_xml_format3(system)
                )
                fsa.generateFile(
                    system.getName().toLowerCase+"/CMakeLists.txt",
                    compile_CMakeLists_ROS2(system,yaml_gen)
                )
                fsa.generateFile(
                    system.getName().toLowerCase+"/setup.py",
                    compile_setup_py(system,yaml_gen)
                )
                fsa.generateFile(
                    system.getName().toLowerCase+"/resource/" + system.getName().toLowerCase,
                    ""
                )
                fsa.generateFile(
                    system.getName().toLowerCase+"/" + system.getName().toLowerCase + "/__init__.py",
                    ""
                )
            }
            if (TopicBridgeGenerated(system) || ServiceFromBridgeGenerated(system) || ServiceToBridgeGenerated(system)){
                fsa.generateFile(
                    system.getName().toLowerCase+"/config/"+"ros1_bridges.yaml",
                    compile_ROS1bridges_config(system)
                )
            }
        }
    }

}

